name: Build Windows (Flutter)

on:
  workflow_dispatch:

# Permisos mínimos (no borraremos artifacts)
permissions:
  contents: read

jobs:
  build-windows:
    runs-on: windows-2022

    env:
      FLUTTER_VERSION: '3.32.1'
      ARTIFACT_NAME: windows-release-${{ github.run_number }}

    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Configurar Flutter ${{ env.FLUTTER_VERSION }} (stable)
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: Verificar versiones
        run: |
          flutter --version
          dart --version

      - name: Habilitar Windows Desktop
        run: flutter config --enable-windows-desktop

      - name: Resolver dependencias
        run: flutter pub get

      - name: Compilar release para Windows
        run: flutter build windows --release

      # <<< Selecciona la carpeta de salida correcta y verifica contenido >>>
      - name: Verificar carpeta Release y listar contenido
        shell: pwsh
        run: |
          $candidates = @(
            'build/windows/x64/runner/Release',
            'build/windows/arm64/runner/Release',
            'build/windows/runner/Release' # ruta legacy
          )
          $releaseDir = $null
          foreach ($p in $candidates) { if (Test-Path $p) { $releaseDir = $p; break } }
          if (-not $releaseDir) { throw "No se encontró ninguna carpeta Release en: $($candidates -join ', ')" }

          Write-Host "Carpeta Release detectada: $releaseDir"
          Get-ChildItem -Recurse $releaseDir | Select-Object Length, FullName | Format-Table -AutoSize

          # Guardar ruta para el siguiente paso
          echo "RELEASE_DIR=$releaseDir" >> $env:GITHUB_ENV

      # Empaquetar la carpeta Release correcta en un ZIP único
      - name: Empaquetar ZIP
        shell: pwsh
        run: |
          $zipName = "${{ env.ARTIFACT_NAME }}.zip"
          if (Test-Path $zipName) { Remove-Item $zipName -Force }
          Compress-Archive -Path "$env:RELEASE_DIR\*" -DestinationPath $zipName -Force
          Write-Host "Empaquetado: $env:RELEASE_DIR -> $zipName"

          # Mostrar tamaño final del ZIP
          Get-Item $zipName | Select-Object Name, Length | Format-Table -AutoSize

      - name: Subir artefacto (.zip)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.ARTIFACT_NAME }}.zip
          if-no-files-found: error
          retention-days: 30